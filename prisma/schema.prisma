// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
    ADMIN
    TEACHER
    STUDENT
    PARENT
}

enum TeacherStatus {
    PENDING
    AVAILABLE
    TEACHING
    DELETED
    REJECTED
}

enum AttendanceStatus {
    PRESENT
    ABSENT
    LATE
}

enum Gender {
    MALE
    FEMALE
}

model User {
    id String @id @db.Uuid @default(uuid())
    referId String @db.Text @unique
    firstName String? @db.Text
    lastName String? @db.Text
    email String @db.Text
    phoneNumber String? @db.Text
    identifyCard String? @db.Text
    imageUrl String? @db.Text
    birthday DateTime?
    gender Gender?
    role UserRole?

    admin Admin?
    teacher Teacher?
    parent Parent?
    student Student?

    createdAt DateTime @default(now())
    updatedAt DateTime?
    deletedAt DateTime?
}

model Teacher {
    id String @id @db.Uuid @default(uuid())
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.Uuid @unique
    status TeacherStatus @default(PENDING)
    baseSalary Decimal @db.Decimal(20, 2) @default(0)
    acceptedAt DateTime?

    monthlyPayments MonthlyPayment[]
    classes Class[]
}

model MonthlyPayment {
    id String @id @db.Uuid @default(uuid())
    teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
    teacherId String @db.Uuid
    salary Decimal @db.Decimal(20, 2)
    year Int @db.Integer
    month Int @db.Integer
    paidAt DateTime @default(now())
}

model Admin {
    id String @id @db.Uuid @default(uuid())
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.Uuid @unique
}

model Parent {
    id String @id @db.Uuid @default(uuid())
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.Uuid @unique

    children ChildrenParents[]
    tuitions Tuition[]
}

model Student {
    id String @id @db.Uuid @default(uuid())
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.Uuid @unique
    discount Int @db.Integer @default(0)

    parents ChildrenParents[]
    tuitions Tuition[]
    classes StudentsInClasses[]
    attendances Attendance[]
}

model ChildrenParents {
    child Student @relation(fields: [childId], references: [id], onDelete: Cascade)
    childId String @db.Uuid
    parent Parent @relation(fields: [parentId], references: [id], onDelete: Cascade)
    parentId String @db.Uuid
    createdAt DateTime @default(now())

    @@id([childId, parentId])
}

model Tuition {
    id String @id @db.Uuid @default(uuid())
    child Student @relation(fields: [childId], references: [id], onDelete: Cascade)
    childId String @db.Uuid
    parent Parent @relation(fields: [parentId], references: [id], onDelete: Cascade)
    parentId String @db.Uuid
    class Class @relation(fields: [classId], references: [id], onDelete: Cascade)
    classId String @db.Uuid
    year Int @db.Integer
    month Int @db.Integer
    amount Decimal @db.Decimal(20, 2)
    discount Int @db.Integer
    paidAt DateTime @default(now())

    @@unique([childId, classId, year, month])
}

model Unit {
    id String @id @db.Uuid @default(uuid())
    year Int @db.Integer
    grade Int @db.Integer
    maxSessions Int @db.Integer
    maxStudents Int @db.Integer
    studyHour Int @db.Integer
    studyMinute Int @db.Integer
    studySecond Int @db.Integer
    pricePerSession Decimal @db.Decimal(20, 2) 

    classes Class[]

    createdAt DateTime @default(now())
    updatedAt DateTime?

    @@unique([year, grade])
}

model Class {
    id String @id @db.Uuid @default(uuid())
    unit Unit @relation(fields: [unitId], references: [id], onDelete: Cascade)
    unitId String @db.Uuid
    teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
    teacherId String @db.Uuid
    index Int @db.Integer
    startTime DateTime
    endTime DateTime
    timeZone String

    sessions Session[]
    schedules Schedule[]
    students StudentsInClasses[]
    tuitions Tuition[]

    createdAt DateTime @default(now())
    updatedAt DateTime?
    closedAt DateTime?
}

model Schedule {
    id String @id @db.Uuid @default(uuid())
    class Class @relation(fields: [classId], references: [id], onDelete: Cascade)
    classId String @db.Uuid
    dayOfWeek Int @db.Integer
    startHour Int @db.Integer
    startMinute Int @db.Integer
    startSecond Int @db.Integer
    location String?

    createdAt DateTime @default(now())
}

model StudentsInClasses {
    class Class @relation(fields: [classId], references: [id], onDelete: Cascade)
    classId String @db.Uuid
    student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
    studentId String @db.Uuid
    registeredAt DateTime @default(now())
    rejectedAt DateTime?
    approvedAt DateTime?
    leftAt DateTime?

    @@id([classId, studentId])
}

model Session {
    id String @id @db.Uuid @default(uuid())
    class Class @relation(fields: [classId], references: [id], onDelete: Cascade)
    classId String @db.Uuid
    estimatedStartTime DateTime
    actualStartTime DateTime?
    attendedTime DateTime?

    attendances Attendance[]

    createdAt DateTime @default(now())
    updatedAt DateTime?
}

model Attendance {
    id String @id @db.Uuid @default(uuid())
    session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    sessionId String @db.Uuid
    student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
    studentId String @db.Uuid
    status AttendanceStatus?
    description String?

    createdAt DateTime @default(now())
    updatedAt DateTime?
}